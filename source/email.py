import dotenv
import os
from source.logs import init_log, logging_msg


####################################################################################################
####################################################################################################
####################################################################################################

############
###Â INIT ###
############
def init()->bool:
    log_prefix = '[email | init]'
    try:
        dotenv.load_dotenv('.env', override=True)
        init_log()

        logging_msg(f"{log_prefix} OK")
        return True
    
    except Exception as e:
        print(f"Error: {e}")
        return False
    

####################################################################################################
####################################################################################################
####################################################################################################




####################################################################################################
####################################################################################################
####################################################################################################

############
### MAIN ###
############
def main()->bool:
    log_prefix = '[email | main]'
    try:
        if init():
            DEBUG = os.getenv('DEBUG')
            
            logging_msg(f"{log_prefix} ALL OK", 'WARNING')
            
        logging_msg(f"{log_prefix} END")
        return True
    
    except Exception as e:
        logging_msg(f"{log_prefix} Error: {e}", 'CRITICAL')
        return False